body {
  width: 100%;
  height: 100vh;
}

Now, get rid of the horizontal scroll-bar, by setting the body default margin added by some browsers to 0:
body {
  width: 100%;
  height: 100vh;
  margin: 0; <----
}

As suggested by the title, you are creating a form. So, after the p element, insert a form with an action attribute targeting https://register-demo.freecodecamp.org:
  <body>
    <h1>Registration Form</h1>
    <p>Please fill out this form with the required information</p>
    <form action='https://register-demo.freecodecamp.org'> </form><----
  </body>


Seeing as we plan on having three distinct sections to the form, add three fieldset elements within the form:
<body>
    <h1>Registration Form</h1>
    <p>Please fill out this form with the required information</p>
    <form action='https://register-demo.freecodecamp.org'>
        <fieldset></fieldset>
        <fieldset></fieldset>
        <fieldset></fieldset>
    </form>
  </body>

You can add minlength attribute to define min. Length of the password:
<label>Create a New Password: <input type="password" minlength="8" required /></label>

With type="password" you can use the pattern attribute to define a regular expression that the password must match to be considered valid.
Add a pattern attribute to the password input element to require the input match: [a-z0-5]{8,}:
<label>Create a New Password: <input type="password" pattern="[a-z0-5]{8,}" required /></label>


You only want one radio input to be selectable at a time. However, the form does not know the radio inputs are related.
To relate the radio inputs, give them the same name attribute with a value of account-type. Now, it is not possible to select both radio inputs at the same time.
   <fieldset>
      <label><input type="radio" name="account-type"/> Personal Account</label>
      <label><input type="radio" name="account-type"/> Business Account</label>
      <label><input type="checkbox" required /> I accept the terms and conditions</label>
   </fieldset>


Moving on to the final fieldset. What if you wanted to allow a user to upload a profile picture?
Well, the input type file allows just that. Add a label with the text Upload a profile picture: , and add an input accepting a file upload:
<fieldset>
    <label>Upload a profile picture: <input type="file" /></label>
</fieldset>


Add another label after the first, with the text Input your age (years): . Then, nest an input with the type of number.
As we do not want users under the age of 13 to register, add a min attribute to the input with a value of 13. Also, we can probably assume users over the age of 120 will not register; add a max attribute with a value of 120.
<fieldset>
    <label>Upload a profile picture: <input type="file" /></label>
    <label>Input your age (years): <input type="number" min="13" max="120"></label> <---
</fieldset>


Adding a dropdown to the form is easy with the select element. The select element is a container for a group of option elements, and the option element acts as a label for each dropdown option. Both elements require closing tags.
Start, by adding a select element below the two label elements. Then, nest 5 option elements within the select element.
<fieldset>
   <label>Upload a profile picture: <input type="file" /></label>
   <label>Input your age (years): <input type="number" min="13" max="120"/> </label>
   <select>
     <option></option>
     <option></option>       
     <option></option>       
     <option></option>       
     <option></option>       
   </select>
</fieldset>

The dropdown options are currently empty. To give them content, add the following text to each subsequent option element:
<fieldset>
   <label>Upload a profile picture: <input type="file" /></label>
   <label>Input your age (years): <input type="number" min="13" max="120" /> </label>
   <label>How did you hear about us?
     <select>
            <option>(select one)</option>
            <option>freeCodeCamp News</option>
            <option>freeCodeCamp YouTube Channel</option>
            <option>freeCodeCamp Forum</option>
            <option>Other</option>
     </select>
    </label>
</fieldset>


Submitting the form with an option selected would not send a useful value to the server. As such, each option needs to be given a value attribute. Without which, the text content of the option will be submitted to the server.
Give the first option a value of "", and the subsequent option elements value attributes from 1 to 4.
<fieldset>
   <label>Upload a profile picture: <input type="file" /></label>
   <label>Input your age (years): <input type="number" min="13" max="120" /> </label>
        <label>How did you hear about us?
          <select>
            <option value="">(select one)</option>
            <option value="1">freeCodeCamp News</option>
            <option value="2">freeCodeCamp YouTube Channel</option>
            <option value="3">freeCodeCamp Forum</option>
            <option value="4">Other</option>
          </select>
        </label>
</fieldset>


The textarea element acts like an input element of type text, but comes with the added benefit of being able to receive multi-line text, and an initial number of text rows and columns
Users will be able to register with a bio. Add a label with the text Provide a bio: at the end of the fieldset. Add a textarea element inside the label element. Note that the textarea requires a closing tag
      <fieldset>
        <label>Upload a profile picture: <input type="file" /></label>
        <label>Input your age (years): <input type="number" min="13" max="120" />
			  </label>
        <label>How did you hear about us?
          <select>
            <option value="">(select one)</option>
            <option value="1">freeCodeCamp News</option>
            <option value="2">freeCodeCamp YouTube Channel</option>
            <option value="3">freeCodeCamp Forum</option>
            <option value="4">Other</option>
          </select>
        </label>
        <label> Provide a bio: <--
        <textarea></textarea>  <--
        </label>               <--
      </fieldset>


The textarea appears too small. To give it an initial size, you can add the rows and cols attributes:
<label>Provide a bio:
   <textarea rows="3" cols="30"></textarea> <----
</label>

To give Campers an idea of what to put in their bio, the placeholder attribute is used. The placeholder accepts a text value, which is displayed until the user starts typing:
<label>Provide a bio:
    <textarea rows="3" cols="30" placeholder="I like coding on the beach..."></textarea>
</label>


Center the h1 and p elements by giving them a margin of 1em auto. Then, align their text in the center as well:
h1, p {
  margin: 1em auto;
  text-align: center;
}


Center the form element, by giving it a margin of 0 auto. Then, fix its size to a maximum width of 500px, and a minimum width of 300px. In between that range, allow it to have a width of 60vw:
form {
  margin: 0 auto;
  max-width: 500px;
  min-width: 300px;
  width: 60vw;
}

Remove the border, and add 2rem of padding only to the top and bottom of each fieldset. Be sure to remove the padding from the left and right:
fieldset {
  padding: 2rem 0;
  border: none;
}

To give the fieldset elements a bit of separation, select them and give them a border-bottom of 3px solid #3b3b4f:
fieldset {
  border: none;
  padding: 2rem 0;
  border-bottom: 3px solid #3b3b4f; <---
}

The border of the last fieldset element looks a little out of place. You can select the last element of a specific type using the last-of-type CSS pseudo-class, like this:
p:last-of-type { }
Example:
That will select the last p element. Create a new selector that targets the last fieldset element and set its border-bottom to none:
fieldset:last-of-type{
  border-bottom: none;
}

Select only the .inline elements, and give them width of unset. This will remove the earlier rule which set all the input elements to width: 100%:
.inline {
  width: unset;
}

If you look close enough, you will notice the .inline elements are too high on the line.
.inline {
  width: unset;
  margin: 0 0.5em 0 0;
  vertical-align: middle;
}

o make the input and textarea elements blend in with the background theme, set their background-color to #0a0a23. Then, give them a 1px, solid border with a color of #0a0a23:
input, textarea {
  background-color: #0a0a23;
  border: 1px solid #0a0a23;
}



To style the submit button, you can use an attribute selector, which selects an element based on the given attribute value. Here is an example:
input[name="password"]
The above selects input elements with a name attribute value of password.
Now, use the attribute selector to style the submit button with a display of block, and a width of 60%:
nput[type="submit"]{
  display: block;
  width: 60%;
}



With a display of block the submit button sits flush against the left edge of its parent.
Use the same technique used to center the form to center the submit button.
input[type="submit"] {
  display: block;
  width: 60%;
  margin: 0 auto; <--- weil display: block;
}


CSS propterties with values:
- width: 100%;
- height: 100vh;
- margin: 0;
- text-align: center;
- max-width: 500px;
- min-width: 300px;
- width: 60vw;
- border: none; /* removes border */
- border-bottom: 3px solid #3b3b4f;
- border-bottom: none;
- vertical-align: middle;
- border: 1px solid #0a0a23;
- border-color: white;